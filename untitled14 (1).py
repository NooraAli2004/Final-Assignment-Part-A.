# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EpHHpujlChLTe5alKUWG2__P7Z5erQF3
"""

import bisect #importing the appropriate modules
import heapq

class SocialMedia: #creating a class called social media
    def __init__(self): #initializing the constructor function and 'self' being the instance of the class
        self.posts_by_datetime = {} #creating a dictionary to store posts by their datetime (key)

        self.posts = [] #creating a list to store posts sorted by datetime so its easier to find them for a specific range

        self.view_counter = 0 #initializing a counter for the number of views on each post
        self.posts_by_views = [] #creating a list that'll store and prioritize the posts by view count (max heap)

    def add_post(self, datetime, post, posted_by, views=0): #defining a function for adding new posts to social media with 4 parameters and 'views' being optional

        self.posts_by_datetime[datetime] = {'post': post, 'posted by' : posted_by, 'views': views} # Adding a hash table for finding posts by datetime

        bisect.insort(self.posts, (datetime, {'post': post, 'posted by': posted_by, 'views': views})) # Adding a binary search tree for finding posts in a time range

        heapq.heappush(self.posts_by_views, (-views, self.view_counter, datetime)) # Adding a max heap for retrieving post with most views
        self.view_counter += 1 #creating a counter that basically counts the number of posts and every post can be stored individually in the max heap

    def find_post_by_datetime(self, datetime): #creating a function that would find posts by datetime
        return self.posts_by_datetime.get(datetime, None) #if found by the specific key which is datetime, then the corresponding value is returned, if not then it'll return "none"

    def find_posts_in_range(self, start_datetime, end_datetime): ##defining a function to find posts by datetime, therefore adding parameters called start datetime and end datetime
        start_index = bisect.bisect_left(self.posts, (start_datetime,)) #starting index meaning we need to find the insertion point of the given element in the sorted list, it should give us a post with a datetime greater than or equal to the start datetime
        end_index = bisect.bisect_right(self.posts, (end_datetime,)) #similarly, end index meaning we need to find where the element should be inserted after any existing elements equal to it, it should give us a post with a datetime greater than the end datetime
        return [post for datetime, post in self.posts[start_index:end_index]] #returning the posts within the time range specified by start datetime and end datetime.

    def get_most_viewed_post(self): #defining a function to retrieve the posts with the most views
        if self.posts_by_views: #using if statement to check if here are posts stored in the max heap
            most_viewed = self.posts_by_views[0] #if there are posts, this line retrieves the first element of the heap (root) which corresponds to the posts with the most views
            return self.posts_by_datetime[most_viewed[2]] #it will return or retrieve the details of the posts fromn the dictionary with "most viewed" corresponding to the datetime of the most viewed post, which serves as the key in the dictionary.
        else:
            return None #otherwise it'll return none

#test cases
social_media = SocialMedia()

# Adding posts
social_media.add_post('2024-04-09 12:00:00', 'Burj Khalifa', 'Noora', 100)
social_media.add_post('2024-04-09 12:30:00', 'beautiful Thailand', 'Hind', 240)
social_media.add_post('2024-04-09 12:50:00', 'ramadan vibes', 'Najla', 140)
social_media.add_post('2024-04-04 10:50:00', 'New car', 'Hessa', 340)


# Finding posts
print ("Find posts:")
print(social_media.find_post_by_datetime('2024-04-09 12:00:00')) #finding Noora's post by her specific datetime
print(social_media.find_post_by_datetime('2024-04-09 12:50:00'))  #finding Najla's post by her specific datetime
print(social_media.find_post_by_datetime('2024-04-05 12:00:00'))  #it prints none because there is no post uploaded at this datetime

#finding posts within a specific datetime range
print ("find posts within specific datetime: ")
print(social_media.find_posts_in_range('2024-04-09 11:00:00', '2024-04-09 12:45:00'))  #Both Noora and Hind's posts were posted in this range of datetime therefore only both have been printed
print(social_media.find_posts_in_range('2024-04-04 10:00:00', '2024-04-09 12:20:00'))  #Both Noora and Hessa's posts were posted in this range of datetime therefore only both have been printed
print(social_media.find_posts_in_range('2024-04-10 10:00:00', '2024-04-11 12:20:00')) #it does not print anything because there is no post within this specific range of datetime

# Retrieving post with most views
print ("find post with most views: ")
print(social_media.get_most_viewed_post())